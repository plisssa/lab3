/**
 * Этот класс представляет собой один шаг на пути, сгенерированном поиском пути A*.
 * алгоритм. Путевые точки состоят из местоположения, предыдущей путевой точки в
 * путь и некоторые значения стоимости, используемые для определения наилучшего пути.
 **/
public class Waypoint {
    /** Расположение этой путевой точки. **/
    Location loc;

    /**
     * Предыдущая путевая точка на этом пути или <code>null</code>, если это
     * корень поиска A*.
     **/
    Waypoint prevWaypoint;

    /**
     * В этом поле хранится общая предыдущая стоимость получения от начального
     * расположение к этой путевой точке через цепочку путевых точек. Это
     * фактическая стоимость прохождения пути; он не включает никаких оценок.
     **/
    private float prevCost;

    /**
     * В этом поле хранится оценка оставшейся стоимости проезда от
     * эта путевая точка до конечного пункта назначения.
     **/
    private float remainingCost;


    /**
     * Построить новую путевую точку для указанного места. Предыдущая путевая точка
     * можно указать дополнительно, или ссылка может быть <code>null</code> на
     * указывает, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращает местоположение путевой точки. **/
    public Location getLocation()
    {
        return loc;
    }

    /**
     * Возвращает предыдущую путевую точку на пути или <code>null</code>, если это
     * — начало пути.
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }

    /**
     * Этот мутатор позволяет изменить как предыдущую, так и оставшуюся стоимость.
     * устанавливается одним вызовом метода. Обычно эти значения устанавливаются одинаковыми.
     * время в любом случае.
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращает фактическую стоимость достижения этой точки с начала
     * местоположение, через серию путевых точек в этой цепочке.
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Возвращает оценку оставшейся стоимости поездки из этого
     * указать конечный пункт назначения.
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     * Возвращает оценку общей стоимости для этой путевой точки. Это включает в себя
     * фактическая стоимость проезда до этой точки из стартовой локации, плюс
     * оценка оставшейся стоимости проезда от этой точки до
     * пункт назначения.
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}

